---
blueprint:
  name: AWTRIX Moon phase 🌕️
  description: >

    Moon phase indication

  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix 3
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
    moon:
      name: Moon Phase Sensor
      description: >
        🌑️🌒️🌓️🌔️🌖️🌗️🌘️

        To setup a moon sensor see here: https://www.home-assistant.io/integrations/moon/

        or just [clicking here](https://my.home-assistant.io/redirect/config_flow_start?domain=moon)

      selector:
        entity:
          multiple: false
          filter:
            integration: moon
    moon_rise_set:
      name: Moon Riese/Set Sensor
      description: >
        As Home Assistant doesn't provide moon rise/set times you will need to get this from some api. In my personal setup I use [ipgeolocation](https://app.ipgeolocation.io) as my api.

        You can create a custom REST sensor as follows:

        ```
        sensor:
        - platform: rest
          resource: https://api.ipgeolocation.io/astronomy?lat=<LAT>&long=-<LON>&apiKey=<API_KEY>
          name: ip_geo_location
          scan_interval: 300
          value_template: "OK"
          json_attributes:
            - moonrise
            - moonset
            - moon_altitude
        ```

      selector:
        entity:
          multiple: false
          filter:
            integration: rest
    message_duration_moon:
      name: Moon Duration ⏱️
      description: >-
        How long should the moon message remain on the screen(in seconds).  *If you select `0` it will use the Global App Time*
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: "sec"
      default: 30



mode: restart
variables:
  device_ids: !input awtrix
  app_topic: moon
  devices_topics: >-
    {%- macro get_device_topic(device_id) %}
    {{ states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {%- endmacro %}

    {%- set ns = namespace(devices=[]) %}
    {%- for device_id in device_ids %}
      {%- set device=get_device_topic(device_id)|replace(' ','') %}
      {% set ns.devices = ns.devices + [ device ~ '/custom/' ~ app_topic] %}
    {%- endfor %}
    {{ ns.devices | reject('match','unavailable') | list}}
	
  #---------------------------------
  # Moon Stuff
  #---------------------------------
  moon: !input moon
  moon_phase: "{{states(moon)}}"
  moon_rise: "{{state_attr(moon_times,'moonrise')}}"
  moon_set: "{{state_attr(moon_times,'moonset')}}"
  moon_alt: "{{state_attr(moon_times,'moon_altitude')}}"
  moon_risen: "{{moon_alt > 0}}"
  message_duration: !input message_duration_moon
  moon_icon: >-
    {% set phase = states(moon) %}
    {% if phase == "new_moon" %}
      2318
    {% elif phase == "waxing_crescent" %}
      2319
    {% elif phase == "first_quarter" %}
      2320
    {% elif phase == "waxing_gibbous" %}
      2321
    {% elif phase == "full_moon" %}
      2314
    {% elif phase == "waning_gibbous" %}
      2315
    {% elif phase == "last_quarter" %}
      2316
    {% elif phase == "waning_crescent" %}
      2317
    {% endif %}

trigger:
  - platform: state
    entity_id: !input moon

action:
  - service: mqtt.publish
    data_template:
      topic: >-
        {%- for topic in devices_topics %}
          {{ topic }}
        {%- endfor %}
      payload: >-
        {
          "icon": "{{ moon_icon }}",
          "text": "{{ moon_phase }}",
          "duration": {{ message_duration }}
        }