blueprint:
  name: "AWTRIX - Ligue 1 Team Scoreboard"
  author: TPaul
  description: >
    # Ligue 1 Team Scoreboard for AWTRIX Light

    ## Prerequisites

    **Before** using this blueprint, ensure that you have **HACS** installed. You also need the ha-teamtracker integration [here](https://github.com/vasqued2/ha-teamtracker).

  domain: automation

  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix 3
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true

    appname:
      name: Awtrix Application name
      description: >-
        This is the app name listed in the MQTT topic - it should be unique
      default: "ligue1teamscore"
      selector:
        text:

    message_duration:
      name: Message Duration ⏱️
      description: >-
        How long should the message remain on the screen (in seconds).
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: "sec"
      default: 15

    my_sensor:
      name: Football Sensor
      description: Select your Football Team Sensor
      selector:
        entity:
          filter:
            - integration: teamtracker

  source_url: https://github.com/TriPaul/HA-blueprints/blob/main/team_score.yaml

variables:
  device_ids: !input awtrix
  devices: >-
    {% macro get_device(device_id) %}
      {{ states((device_entities(device_id) | select('search','device_topic') | list)[0] | default('unknown')) }}
    {% endmacro %}
    {% set ns = namespace(devices=[]) %}
    {% for device_id in device_ids %}
      {% set device=get_device(device_id)|replace(' ','')|replace('\n','') %}
      {% set ns.devices = ns.devices + [ device ] %}
    {% endfor %}
    {{ ns.devices | reject('match','unavailable|unknown') | list }}
  appname: !input appname
  my_sensor: !input my_sensor
  message_duration: !input message_duration
  team_colors_0: "{{ state_attr(my_sensor, 'team_colors')[0] }}"
  team_colors_1: "{{ state_attr(my_sensor, 'team_colors')[1] }}"
  opponent_colors_0: "{{ state_attr(my_sensor, 'opponent_colors')[0] }}"
  opponent_colors_1: "{{ state_attr(my_sensor, 'opponent_colors')[1] }}"
  team_score: "{{ state_attr(my_sensor, 'team_score') }}"
  opponent_score: "{{ state_attr(my_sensor, 'opponent_score') }}"
  first_quarter: >-
    {"dp":[14,7,"#ffffff"]},
    {"dp":[17,7,"#5F5F5F"]},
  second_quarter: >-
    {"dp":[14,7,"#ffffff"]},
    {"dp":[17,7,"#ffffff"]},
  payload_switch: >-
    {
      "name" : "{{ appname }}"
    }
  payload_game_start: >-
    {
      "draw":[ 
        {"df":[0,0,16,8,"#000000"]},     
        {"df":[16,0,16,8,"#000000"]}, 
        {"dl":[1,0,1,7,"{{ team_colors_0 }}"]},
        {"dl":[3,0,3,7,"{{ team_colors_1 }}"]},
        {"dl":[28,0,28,7,"{{ opponent_colors_0 }}"]}, 
        {"dl":[30,0,30,7,"{{ opponent_colors_1 }}"]}, 
        {{ first_quarter }}
        {"dt":[7, 1, "{{ team_score }}",[255,255,255]]}, 
        {"dt":[18, 1, "{{ opponent_score }}",[255,255,255]]}, 
        {"dl":[15,3,16,3,"#ffffff"]} 
      ], 
      "duration": {{ message_duration }} 
    }
  payload_half_time: >-
    {
      "draw":[ 
        {"df":[0,0,16,8,"#000000"]},     
        {"df":[16,0,16,8,"#000000"]}, 
        {"dl":[1,0,1,7,"{{ team_colors_0 }}"]},
        {"dl":[3,0,3,7,"{{ team_colors_1 }}"]},
        {"dl":[28,0,28,7,"{{ opponent_colors_0 }}"]}, 
        {"dl":[30,0,30,7,"{{ opponent_colors_1 }}"]}, 
        {"dp":[14,7,"#ed7f10"]},
        {"dp":[17,7,"#ed7f10"]},
        {"dt":[7, 1, "{{ team_score }}",[255,255,255]]}, 
        {"dt":[18, 1, "{{ opponent_score }}",[255,255,255]]}, 
        {"dl":[15,3,16,3,"#ffffff"]} 
      ], 
      "duration": {{ message_duration }} 
    }
  payload_second_quarter: >-
    {
      "draw":[ 
        {"df":[0,0,16,8,"#000000"]},     
        {"df":[16,0,16,8,"#000000"]}, 
        {"dl":[1,0,1,7,"{{ team_colors_0 }}"]},
        {"dl":[3,0,3,7,"{{ team_colors_1 }}"]},
        {"dl":[28,0,28,7,"{{ opponent_colors_0 }}"]}, 
        {"dl":[30,0,30,7,"{{ opponent_colors_1 }}"]}, 
        {{ second_quarter }}
        {"dt":[7, 1, "{{ team_score }}",[255,255,255]]}, 
        {"dt":[18, 1, "{{ opponent_score }}",[255,255,255]]}, 
        {"dl":[15,3,16,3,"#ffffff"]} 
      ], 
      "duration": {{ message_duration }} 
    }
  payload_end: >-
    {% if team_score|int < opponent_score|int %}
      {
        "text": "Match termine !",
        "color": [255, 255, 255],
        "icon": "30971",
        "pushIcon": 0,
       "progress": "100",
        "progressC": [255, 0, 0],
        "duration": 10
      }
    {% elif team_score|int == opponent_score|int %}
      {
        "text": "Match termine !",
        "color": [255, 255, 255],
        "icon": "60056",
        "pushIcon": 0,
        "progress": "100",
        "progressC": [255, 128, 0],
        "duration": 10
      }
    {% elif team_score|int > opponent_score|int %}
      {
        "text": "Match termine !",
        "color": [255, 255, 255],
        "icon": "84",
        "pushIcon": 0,
        "progress": "100",
        "progressC": [0, 255, 0],
        "duration": 10
      }
    {% endif %}

trigger:
  - platform: state
    entity_id:
      - !input my_sensor
    to: IN
    id: Game Start
  - platform: state
    entity_id:
      - !input my_sensor
    to: POST
    id: Game End
  - platform: state
    entity_id:
      - !input my_sensor
    attribute: team_score
    id: Team Score Change
  - platform: state
    entity_id:
      - !input my_sensor
    attribute: opponent_score
    id: Opponent Score Change
  - platform: state
    entity_id:
      - !input my_sensor
    attribute: quarter
    id: Quarter Change
  - platform: state
    entity_id:
      - !input my_sensor
    attribute: Clock
    to: HT
    id: Half time

condition: []
action:
  - repeat:
      for_each: "{{ devices }}"
      sequence:
        - choose:
            - conditions:
                - condition: trigger
                  id:
                    - Game Start
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                    payload: "{{ payload_game_start }}"
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/switch"
                    payload: "{{ payload_switch }}"
            - conditions:
                - condition: trigger
                  id:
                    - Half time
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                    payload: "{{ payload_half_time }}"
            - conditions:
                - condition: trigger
                  id:
                    - Quarter Change
                - condition: numeric_state
                  entity_id: !input my_sensor
                  attribute: quarter
                  above: 1
                  below: 3
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                    payload: "{{ payload_second_quarter }}"
            - conditions:
                - condition: trigger
                  id:
                    - Team Score Change
                - condition: numeric_state
                  entity_id: !input my_sensor
                  attribute: quarter
                  above: 0
                  below: 2
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                    payload: "{{ payload_game_start }}"
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/switch"
                    payload: "{{ payload_switch }}"
            - conditions:
                - condition: trigger
                  id:
                    - Team Score Change
                - condition: numeric_state
                  entity_id: !input my_sensor
                  attribute: quarter
                  above: 1
                  below: 3
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                    payload: "{{ payload_second_quarter }}"
            - conditions:
                - condition: trigger
                  id:
                    - Opponent Score Change
                - condition: numeric_state
                  entity_id: !input my_sensor
                  attribute: quarter
                  above: 0
                  below: 2
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                    payload: "{{ payload_game_start }}"
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/switch"
                    payload: "{{ payload_switch }}"
            - conditions:
                - condition: trigger
                  id:
                    - Opponent Score Change
                - condition: numeric_state
                  entity_id: !input my_sensor
                  attribute: quarter
                  above: 1
                  below: 3
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                    payload: "{{ payload_second_quarter }}"
                    
  - repeat:
      for_each: "{{ devices }}"
      sequence:
        - choose:
            - conditions:
                - condition: trigger
                  id:
                    - Game End
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/custom/{{ appname }}"
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{ repeat.item }}/notify"
                    payload: "{{ payload_end }}"
mode: restart
